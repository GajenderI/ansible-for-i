# Test become_user and become_user_password
- set_fact:
    becomeuser: 'anbecome'
    becomepwd: 'password'
    libname: 'becomelib'
  no_log: true

- block: 
    - name: create a user profile with required options
      ibmi_user_and_group:
        operation: 'create'
        user: '{{becomeuser}}'
        password: '{{becomepwd}}'

    - name: display a user profile with required options
      ibmi_user_and_group:
        operation: 'display'
        user: '{{becomeuser}}'
      register: user_result

    # - name: TC01 end the host server if it is running
    #   ibmi_reboot:
    #     become_user: '{{becomeuser.upper()}}'
    #     become_user_password: '{{becomepwd}}'
    #   register: reboot_result
      #failed_when: "reboot_result.job_log | selectattr('MESSAGE_ID', 'equalto', 'CPD0032') | map(attribute='MESSAGE_ID') | list | length == 0"

    - name: backup original ansible_ssh_user
      set_fact:
        org_user: '{{ansible_ssh_user}}'

    - name: backup original ansible_ssh_pass
      no_log: true
      set_fact: 
        org_user_password: '{{ansible_ssh_pass}}'
      when: ansible_ssh_pass is defined

    - name: set ansible_ssh_user to *USRCLS
      no_log: true
      set_fact:
        ansible_ssh_user: '{{becomeuser}}'
        ansible_ssh_pass: '{{becomepwd}}'

    - import_tasks: get_boot_time.yml

    - name: Immediate reboot
      ibmi_reboot:
        pre_reboot_delay: 10
        post_reboot_delay: 60
        reboot_timeout: 1000
        connect_timeout: 600
        test_command: 'hostname'
        msg: 'abc'
        how_to_end: '*IMMED'
        controlled_end_delay_time: 100
        reboot_type: '*FULL'
        ipl_source: 'A'
        end_subsystem_option: '*CHGPTY'
        timeout_option: '*CONTINUE'
        become_user: '{{org_user}}'
        become_user_password: '{{org_user_password}}'
      register: reboot_result

    - import_tasks: get_reboot_inputs.yml

    - name: assert the reboot options match the module inputs
      assert: 
        that:
          # - "'How to end           *IMMED' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          # - "'Delay time           100' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          # - "'IPL source           A' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          # - "'End subsystem option *CHGPTY' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          # - "'Timeout option       *CONTINUE' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          # - "'Confirm              *NO' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*IMMED' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'100' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'A' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*CHGPTY' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*CONTINUE' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*NO' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"

    - import_tasks: get_boot_time.yml

    - name: Controlled reboot with two values of end_subsystem_option
      ibmi_reboot:
        pre_reboot_delay: 40
        post_reboot_delay: 60
        reboot_timeout: 1000
        connect_timeout: 120
        test_command: 'hostname'
        msg: 'abc'
        how_to_end: '*CNTRLD'
        controlled_end_delay_time: 60
        reboot_type: '*IPLA'
        ipl_source: 'B'
        end_subsystem_option: '*NOJOBLOG'
        timeout_option: '*SYSREFCDE'
        become_user: '{{org_user}}'
        become_user_password: '{{org_user_password}}'
      register: reboot_result

    - import_tasks: get_reboot_inputs.yml

    - name: assert the reboot options match the module inputs
      assert: 
        that:
          - "'*CNTRLD' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'60' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'B' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*NOJOBLOG' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*SYSREFCDE' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*NO' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"

    - import_tasks: get_boot_time.yml

    - name: Reboot with default settings
      ibmi_reboot:
        become_user: '{{org_user}}'
        become_user_password: '{{org_user_password}}'
      register: reboot_result

    - import_tasks: get_reboot_inputs.yml

    - name: assert the reboot options match the module inputs
      assert: 
        that:
          - "'*IMMED' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'600' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*PANEL' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*DFT' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*CONTINUE' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"
          - "'*NO' in pwr_cmd_input.row[0]['MESSAGE_SECOND_LEVEL_TEXT']"

  always:
    - name: set ansible_ssh_user to *USRCLS
      no_log: true
      set_fact:
        ansible_ssh_user: '{{org_user.upper()}}'
        ansible_ssh_pass: '{{org_user_password}}'
      ignore_errors: true

    - name: delete the user profile
      ibmi_user_and_group:
        operation: 'delete'
        user: '{{becomeuser}}'
        parameters: "OWNOBJOPT(*DLT)"
      register: user_result
      ignore_errors: true