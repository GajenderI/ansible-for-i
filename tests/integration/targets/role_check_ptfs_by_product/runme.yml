- name: IBM i check a set of PTFs
  hosts: testhost
  gather_facts: no
  collections:
    - ibm.power_ibmi

  vars:
    individual_ptfs_74:
      - {'ptf_id':'SI70931', 'product':'5770SS1'} # It is a requisite ptf of SI71691
      - {'ptf_id':'SI71691', 'product':'5770SS1'}
      #- {'ptf_id':'SI70544', 'product':'5770SS1'} # It is a deployed ptf
    individual_ptfs_73:
      - {'ptf_id':'SI71254', 'product':'5770SS1'} # It is a requisite ptf of SI74270
      - {'ptf_id':'SI74270', 'product':'5770SS1'}
    individual_ptfs_72:
      - {'ptf_id':'SI69149', 'product':'5770SS1'} # It is a requisite ptf of SI74593
      - {'ptf_id':'SI74593', 'product':'5770SS1'}      

# - name: set the ptf group to be used
#   set_fact:
#     group_name: "{{ lookup('vars', 'individual_ptfs' + sql_query['row'][0]['OS_VERSION'] + sql_query['row'][0]['OS_RELEASE']) }}"

  tasks:      
    # - name: query the os version of target IBM i
    #   ibmi_sql_query:
    #     sql: 'SELECT OS_VERSION, OS_RELEASE FROM SYSIBMADM.ENV_SYS_INFO;'
    #   register: sql_query

    # - set_fact:
    #     individual_ptfs: "{{ lookup('vars', 'individual_ptfs_' + sql_query['row'][0]['OS_VERSION'] + sql_query['row'][0]['OS_RELEASE']) }}" 

    # - include: query_remove_ptf.yml
    #   loop: '{{[]+ [individual_ptfs[1]]}}'

    # - include: query_remove_ptf.yml
    #   loop: '{{[]+ [individual_ptfs[0]]}}'

    - name: Add VM to Ansible in-memory inventory
      add_host:
        name: "repo_server_name"
        ansible_ssh_host: ut2026p8.rch.stglabs.ibm.com
        ansible_user: tester 
        groups: ibmi
        ansible_ssh_extra_args: -o StrictHostKeyChecking=no
        ansible_python_interpreter: /QOpensys/pkgs/bin/python3
    - name: negative test
      include: neg_case.yml 
    - meta: end_play      
    - include_role: 
        name: check_ptfs_by_product
      vars:
        product: "5770SS1"
        repo_server: "repo_server_name"
        database: "/tmp/repo.sqlite3"

    - debug: var=ptf_status

    - name: assert returned values
      assert:
        that:
          - ptf_status is defined
          - ptf_status[0].PRODUCT == "5770SS1"
          - ptf_status[0].PRODUCT_STATUS is defined
          - ptf_status[0].PTF_LIST | length >= 2

    - name: assert returned values
      assert:
        that:
          - item.1.PTF_LOADED_STATUS == 'PERMANENTLY REMOVED' 
      when:  item.0.ptf_id == item.1.PTF_IDENTIFIER
      loop: "{{individual_ptfs | product(ptf_status[0].PTF_LIST) | list}}"

- name: IBM i check a set of PTFs
  hosts: repo_server_name
  gather_facts: no
  collections:
    - ibm.power_ibmi
  vars:
    individual_ptfs_74:
      - {'ptf_id':'SI70931', 'product':'5770SS1'} # It is a requisite ptf of SI71691
      - {'ptf_id':'SI71691', 'product':'5770SS1'}
      #- {'ptf_id':'SI70544', 'product':'5770SS1'} # It is a deployed ptf
    individual_ptfs_73:
      - {'ptf_id':'SI71254', 'product':'5770SS1'} # It is a requisite ptf of SI74270
      - {'ptf_id':'SI74270', 'product':'5770SS1'}
    individual_ptfs_72:
      - {'ptf_id':'SI69149', 'product':'5770SS1'} # It is a requisite ptf of SI74593
      - {'ptf_id':'SI74593', 'product':'5770SS1'}   

  tasks:
    - name: query the os version of target IBM i
      ibmi_sql_query:
        sql: 'SELECT OS_VERSION, OS_RELEASE FROM SYSIBMADM.ENV_SYS_INFO;'
      register: sql_query  
    #- name: delete the ptfs from repo if it does exist
    - set_fact:
        individual_ptfs: "{{ lookup('vars', 'individual_ptfs_' + sql_query['row'][0]['OS_VERSION'] + sql_query['row'][0]['OS_RELEASE']) }}" 

    - include_role:
        name: download_individual_ptfs
      vars:
        to_be_downloaded_list: '{{individual_ptfs}}'

    - name: Add individual ptf record into catalog
      ibmi_fix_repo:
        database: "/tmp/repo.sqlite3"
        type: "single_ptf"
        action: "add"
        checksum: True
        parameters: "{{ download_success_list }}"
      register: fix_repo_add_result
      when: download_success_list != []

- name: IBM i check a set of PTFs
  hosts: testhost
  gather_facts: no
  collections:
    - ibm.power_ibmi

  vars:
    individual_ptfs_74:
      - {'ptf_id':'SI70931', 'product':'5770SS1'} # It is a requisite ptf of SI71691
      - {'ptf_id':'SI71691', 'product':'5770SS1'}
      #- {'ptf_id':'SI70544', 'product':'5770SS1'} # It is a deployed ptf
    individual_ptfs_73:
      - {'ptf_id':'SI71254', 'product':'5770SS1'} # It is a requisite ptf of SI74270
      - {'ptf_id':'SI74270', 'product':'5770SS1'}
    individual_ptfs_72:
      - {'ptf_id':'SI69149', 'product':'5770SS1'} # It is a requisite ptf of SI74593
      - {'ptf_id':'SI74593', 'product':'5770SS1'}  

  tasks:
    - name: query the os version of target IBM i
      ibmi_sql_query:
        sql: 'SELECT OS_VERSION, OS_RELEASE FROM SYSIBMADM.ENV_SYS_INFO;'
      register: sql_query  
    - set_fact:
        individual_ptfs: "{{ lookup('vars', 'individual_ptfs_' + sql_query['row'][0]['OS_VERSION'] + sql_query['row'][0]['OS_RELEASE']) }}" 

    - name: Get the individual ptfs' information in catalog
      ibmi_fix_repo:
        database: "/tmp/repo.sqlite3"
        type: "single_ptf"
        checksum: True
        action: "find"
        parameters: "{{ individual_ptfs }}"
      delegate_to: "repo_server_name"
      register: fix_repo_find_result

    - include_role:
        name: 'check_ptf'
      vars:
        check_ptf_list:  "{{ fix_repo_find_result.success_list }}"

    - name: Include sync_apply_individual_ptfs role to transfer a list of individual ptfs to target ibm i, then load and apply
      include_role:
        name: sync_apply_individual_ptfs
      vars:
        ptfs_info_list: "{{ not_loaded_ptfs_list }}"
        src_host: "repo_server_name"
        apply_all_loaded_ptf: true
        auto_ipl: false

    - include_role: 
        name: apply_ptf
      vars:
        to_be_applied_list: "{{individual_ptfs}}"
        apply_all_loaded_ptf: true

    - include_role: 
        name: check_ptfs_by_product
      vars:
        product: "5770SS1"
        repo_server: "repo_server_name"
        database: "/tmp/repo.sqlite3"

    - debug: var=ptf_status

    - name: assert returned values
      assert:
        that:
          - item.1.PTF_LOADED_STATUS == 'APPLIED'
      when:  item.0.ptf_id == item.1.PTF_IDENTIFIER
      loop: "{{individual_ptfs | product(ptf_status[0].PTF_LIST) | list}}"
