# negative test of the role check_ptf_groups
- set_fact:
    repo_server_name: "ut2026p8.rch.stglabs.ibm.com"

- block:
  - name: invalid group_list
    include_role:
      name: check_ptf_groups
    vars: 
      group_list:
        - "INVALID"
        - "SF12345"
      type: "latest"
      repo_server: "{{repo_server_name}}"

  - name: assert the returned group_status
    assert:
      that:
        - group_status | length == 2
        - group_status[0]['LATEST_PTF_GROUP_LEVEL'] is not defined
        - group_status[1]['LATEST_PTF_GROUP_LEVEL'] is not defined
        - group_status[0]['PTF_GROUP_STATUS'] == 'Record not found in repository DB'
        - group_status[1]['PTF_GROUP_STATUS'] == 'Record not found in repository DB'

  - name: invalid type
    include_role:
      name: check_ptf_groups
    vars: 
      group_list:
        - "SF99704"
      type: "newest"
      repo_server: "{{repo_server_name}}"

  - name: assert the returned group_status
    assert:
      that:
        - group_status | length == 0
        - group_status[0]['LATEST_PTF_GROUP_LEVEL'] is not defined
        - group_status[0]['PTF_GROUP_NUMBER'] is not defined
       # - group_status[0]['PTF_GROUP_STATUS'] == 'Record not found in repository DB'
        - group_status[0]['PTF_GROUP_STATUS'] is not defined
        - group_status[0]['PTF_NOT_INSTALLED'] is not defined  

  - name: invalid repo_server
    include_role:
      name: check_ptf_groups
    vars: 
      group_list:
        - "SF99703"
      type: "newest"
      repo_server: "i.am.invalid"

  - debug: var=group_status

  - name: assert the returned group_status
    assert:
      that:
        - group_status | length == 0
        - group_status[0]['LATEST_PTF_GROUP_LEVEL'] is not defined
        - group_status[0]['PTF_GROUP_NUMBER'] is not defined
        - group_status[0]['PTF_GROUP_STATUS'] is not defined
        - group_status[0]['PTF_NOT_INSTALLED'] is not defined   
# negative test of the role check_ptf, hold check_ptf testing, big change pending by fish. 2020/11/6
  - block:
    - set_fact:
        neg_list:
          - {'ptf_id':'ABCDEFG', 'product':'5733SC1', 'file_name':'QSI73751.FILE'} # invalid ptf_id
          - {'product':'5733SC1', 'file_name':'QSI73751'} # missing ptf_id which is required
          - {'product':'5733SC1', 'file_name':'NONEXIST', 'ptf_id':'SI73751'} #invalid file_name
          - {'product':'INVALID', 'file_name':'QSI73751', 'ptf_id':'SI73751'} #invalid product id
          - {'product':'TOOLOONG', 'file_name':'QSI73751', 'ptf_id':'SI73751'} # product id length longer than 7
          - {'product':'5733SC1', 'file_name':'TOOLOOOOONG', 'ptf_id':'SI73751'} # obj length longer than 10
          - {'product':'5733SC1', 'file_name':'QSI73751', 'ptf_id':'ABCDEF123456'} # ptf_id obj length longer than 10
 
    - name: negative test for check_ptf
      include_role:
        name: check_ptf
      vars:
        check_ptf_list: '{{neg_list}}'

    - name: assert the returned parameters
      assert:
        that:
          - ptfs_info | length == neg_list | length
          - not_loaded_ptfs_list | length == neg_list | length
          - ptfs_status | length == 0

# negative test of the role load_ptf

- block:
  - set_fact:
      neg_list:
        - {'ptf_id':'SI73751', 'product':'5733SC1'} #lack of file_name
        - {'ptf_id':'SI73751', 'file_name':'QSI73751'} #lack of product
        - {'product':'5733SC1', 'file_name':'QSI73751'} #lack of ptf_id
        - {'product':'5733SC1', 'file_name':'NONEXIST', 'ptf_id':'SI73751'} #invalid file_name
        - {'product':'INVALID', 'file_name':'QSI73751', 'ptf_id':'SI73751'} #invalid product id
        - {'product':'5733SC1', 'file_name':'QSI73751', 'ptf_id':'ABCD1234'} #invalid ptf id
        - {'product':'TOOLOONG', 'file_name':'QSI73751', 'ptf_id':'SI73751'} # product id length longer than 7
        - {'product':'5733SC1', 'file_name':'TOOLOOOOONG', 'ptf_id':'SI73751'} # obj length longer than 10
        - {'product':'5733SC1', 'file_name':'QSI73751', 'ptf_id':'ABCDEF123456'} # ptf_id obj length longer than 10 
  - name: load ptf with role
    include_role:
      name: load_ptf
    vars: 
      to_be_loaded_list: '{{neg_list}}'

  - name: assert the returned list correct
    assert:
      that:
        - load_fail_list == neg_list
        - load_success_list == []    

# # negative test of the role apply_ptf

- block:
  - set_fact:
      neg_list:
        - {'ptf_id':'SI12345', 'product':'5770UME'} # non-exist ptf_id
        - {'ptf_id':'ABCDEFG', 'product':'5733SC1'} # invalid ptf_id
        - {'ptf_id':'SI73430', 'product':'ABCDEFG'} # non-exist product
        - {'ptf_id':'SI73430', 'product':'ABCDEFGH'} # invalid product - length > 7
        - {'ptf_id':'SI73430', 'product':'5733SS1', 'file_name':'QSI73430'} # more parameter provided
        - {'ptf_id':'SI73430'} # insufficient parameter provided   
        - {'product':'5770UME'} # insufficient parameter provided      
  - name: apply ptf with role
    include_role:
      name: apply_ptf
    vars: 
      to_be_applied_list: '{{neg_list}}'

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list == neg_list
        - apply_success_list == []      
  
  - name: negative testing on other options - temp_or_perm
    include_role:    
      name: apply_ptf
    vars:
      to_be_applied_list:
        - {'ptf_id':'SI73543', 'product':'5770UME'}
      temp_or_perm: '*TAMP' # invalid option
      delayed_option: '*NO' 
      auto_ipl: false     

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list | length == 1 
        - apply_success_list == []

  - name: negative testing on other options - delayed_option
    include_role:    
      name: apply_ptf
    vars:
      to_be_applied_list:
        - {'ptf_id':'SI73543', 'product':'5770UME'}
      temp_or_perm: '*TEMP'
      delayed_option: false # invalid option 
      auto_ipl: false     

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list | length == 1 
        - apply_success_list == []    

  - name: negative testing on other options - auto_ipl
    include_role:    
      name: apply_ptf
    vars:
      to_be_applied_list:
        - {'ptf_id':'SI73543', 'product':'5770UME'}
      temp_or_perm: '*TEMP'
      delayed_option: '*NO' 
      auto_ipl: '*NO'   # invalid option   

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list | length == 1 
        - apply_success_list == []  

  - name: apply a PTF which is already applied on system - find a PTF which is *PERM applied
    ibmi_sql_query:
      sql: "SELECT PTF_IDENTIFIER, A.* FROM QSYS2.PTF_INFO A WHERE PTF_LOADED_STATUS = 'PERMANENTLY APPLIED' ORDER BY PTF_IDENTIFIER desc"
    register: sql_query  

  - name: apply a *PERM applied PTF on system
    include_role:    
      name: apply_ptf
    vars:
      to_be_applied_list:
        - {'ptf_id':"{{sql_query['row'][0]['PTF_IDENTIFIER']}}", 'product':"{{sql_query['row'][0]['PTF_PRODUCT_ID']}}"}
      temp_or_perm: '*PERM'
      delayed_option: '*NO' 
      auto_ipl: false
    when: sql_query.row_count >= 1 

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list | length == 1
        - apply_success_list == []    
    
  - name: apply a PTF which is not loaded on system - find a non-loaded PTF on system
    ibmi_sql_query:
      sql: "SELECT PTF_IDENTIFIER, A.* FROM QSYS2.PTF_INFO A WHERE PTF_LOADED_STATUS = 'NOT LOADED' ORDER BY PTF_IDENTIFIER desc"
    register: sql_query  

  - name: apply a PTF which is not loaded on system - apply a non-loaded PTF on system
    include_role:    
      name: apply_ptf
    vars:
      to_be_applied_list:
        - {'ptf_id':"{{sql_query['row'][0]['PTF_IDENTIFIER']}}", 'product':"{{sql_query['row'][0]['PTF_PRODUCT_ID']}}"}
      temp_or_perm: '*TEMP'
      delayed_option: '*NO' 
      auto_ipl: false
    when: sql_query.row_count >= 1    

  - name: assert the returned list correct
    assert:
      that:
        - apply_fail_list | length == 1
        - apply_success_list == []     
