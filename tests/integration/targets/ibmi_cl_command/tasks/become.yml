# Test become_user and become_user_password
- set_fact:
    becomeuser: 'anbecome'
    becomepwd: 'password'
    libname: 'becomelib'
  no_log: true

- block: 
    - name: create a user profile with required options
      ibmi_user_and_group:
        operation: 'create'
        user: '{{becomeuser}}'
        password: '{{becomepwd}}'

    - name: display a user profile with required options
      ibmi_user_and_group:
        operation: 'display'
        user: '{{becomeuser}}'
      register: user_result

    - name: TC01 create a library with become_user and become_user_password
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}1'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'

    - name: TC01 verify the object is owned by the become user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}1'
        #object_library: 'TEMPLIB'
        object_type: '*LIB'
      register: authority_result

    - name: TC01 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{becomeuser.upper()}}'

    - name: TC03 create a library with a not existing user profile
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}3'
        become_user: 'abc'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC03 create a library with wrong password
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: 'abcdeft'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC03 create a library without a password
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        become_user: '{{becomeuser.upper()}}'
        #become_user_password: 'abcdeft'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC04 create a library without become_user
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        #become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: neg_result

    - name: TC04 verify the object is owned by the ansible_ssh_user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}4'
        #object_library: 'TEMPLIB'
        object_type: '*LIB'
      register: authority_result

    - name: TC04 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{ansible_ssh_user.upper()}}'

    - name: cleanup environment
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        joblog: true
      ignore_errors: true

    # Test when all dependent packages are in place  
    - name: TC05 run CL command module with joblog = False
      ibmi_cl_command:
        cmd: crtlib lib(ansible1)
        joblog: false
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: crtlib_result

    - name: TC01 assert the returned parameters when joblog
      assert:
        that: 
          - "'CPF2110' not in crtlib_result"
          - crtlib_result.joblog == False
          - crtlib_result.cmd != ""
          - crtlib_result.stderr == ""
          - crtlib_result.stderr_lines == []
          - crtlib_result.rc == 0 

    - name: TC02 run CL command module without joblog
      ibmi_cl_command:
        cmd: DSPLIB ansible1
        joblog: true
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: dsplib_result_1

    - name: TC02 assert returned parameters without joblog
      assert:
        that:
          - dsplib_result_1.joblog == true 
          - dsplib_result_1.cmd == "DSPLIB ANSIBLE1"
          - dsplib_result_1.stderr == ""
          - dsplib_result_1.stderr_lines == []
          - dsplib_result_1.rc == 0
          - dsplib_result_1.job_log == [] 

    - name: TC03 run CL command module with joblog = true
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        joblog: true
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: dltlib_result_1

    # Test output parameters
    - name: TC03 assert returned parameters with joblog = true
      assert:
        that:
          - dltlib_result_1.joblog == true
          - dltlib_result_1.cmd == "DLTLIB LIB(ANSIBLE1)"
          - dltlib_result_1.stderr == ""
          - dltlib_result_1.stderr_lines == []
          - dltlib_result_1.rc == 0
          - dltlib_result_1.job_log != [] 

    - name: TC04 run CL command module to delete an not existing module
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
        joblog: True
      register: dltlib_result_2
      ignore_errors: True

    - name: TC04 assert returned parameters with joblog = True
      assert:
        that:
          - dltlib_result_2.job_log != []
          - dltlib_result_2.stderr != ""
          - (dltlib_result_2.job_log | selectattr('MESSAGE_ID', 'equalto', 'CPF2110') | map(attribute='MESSAGE_ID') | list | length) >= 1
          - dltlib_result_2.rc != 0

  always:
    - name: delete libraries
      ibmi_cl_command:
        cmd: qsys/dltlib {{item}}
      loop:
        - "{{libname}}1"
        - "{{libname}}2" 
        - "{{libname}}3"
        - "{{libname}}4" 
      ignore_errors: true

    - name: delete the user profile
      ibmi_user_and_group:
        operation: 'delete'
        user: '{{becomeuser}}'
        parameters: "OWNOBJOPT(*DLT)"
      register: user_result